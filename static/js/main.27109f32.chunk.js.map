{"version":3,"sources":["containers/nav/Nav.js","api.js","containers/slider/Slider.js","containers/schedule/schedule.js","containers/task-edit/task-edit.js","App.js","serviceWorker.js","index.js","containers/nav/images/schedule.svg","containers/nav/images/sunny.svg"],"names":["Navigation","_ref","onSunnyClick","onClockClick","react","className","onClick","src","schedule","alt","sunny","url","path","concat","Slider","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","lib_default","a","assign","orientation","min","max","props","React","Schedule","tasks","onCreate","map","task","id","time","format","TaskEdit","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","state","selectedTime","_this2","es","showSecond","defaultValue","onChange","setState","use12Hours","inputReadOnly","Slider_Slider","onDelete","onSave","scheduled_at","desired_value","App","currentRoute","currentSetting","taskId","lastSentSetting","light","getTasks","axios","get","then","r","data","catch","console","log","t","moment","updateLightReading","setTimeout","sendUpdatedCurrentSetting","patch","setting","_this3","react_default","createElement","onChangeComplete","schedule_Schedule","post","_ref2","task_edit_TaskEdit","find","delete","filter","updatedTask","_ref3","Nav_Navigation","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.27109f32.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./nav.css\";\nimport schedule from \"./images/schedule.svg\";\nimport sunny from \"./images/sunny.svg\";\n\nexport const Navigation = ({ onSunnyClick, onClockClick }) => (\n  <div className=\"nav\">\n    <span onClick={onSunnyClick}>\n      <button className=\"nav__button\">\n        <img src={schedule} alt=\"schedule\" />\n        <span className=\"nav__link\">Current setting</span>\n      </button>\n    </span>\n    <span onClick={onClockClick}>\n      <button className=\"nav__button\">\n        <img src={sunny} alt=\"sunny\" />\n        <span className=\"nav__link\">Schedule</span>\n      </button>\n    </span>\n  </div>\n);\n","import axios from \"axios\";\nimport moment from \"moment\";\n\nfunction url(path) {\n  return `/api${path}`;\n}\n\nexport function getCurrentState() {\n  return axios\n    .get(url(\"/settings/custom_desired_value\"))\n    .then(r => r.data.data.value)\n    .catch(console.log);\n}\n\nexport function getLightReading() {\n  return axios\n    .get(url(\"/settings/light_reading\"))\n    .then(\n      ({\n        data: {\n          data: { value }\n        }\n      }) => value\n    )\n    .catch(console.log);\n}\n\nexport function createTask() {\n  return axios\n    .post(url(\"/tasks\"), {\n      task: { scheduled_at: \"12:00:00\", desired_value: 50 }\n    })\n    .then(({ data: { data: task } }) => task)\n    .catch(console.log);\n}\n\nexport function getTasks() {\n  return axios\n    .get(url(\"/tasks\"))\n    .then(r => r.data.data)\n    .catch(console.log);\n}\n\nexport function updateCurrentSetting(value) {\n  return axios\n    .patch(url(\"/settings/custom_desired_value\"), { value })\n    .then(r => r.data.data.value)\n    .catch(console.log);\n}\n\nexport function updateTask(id, task) {\n  return axios\n    .patch(url(`/tasks/${id}`), task)\n    .then(({ data: { data: t } }) => ({\n      id: t.id,\n      value: t.desired_value,\n      time: moment(t.scheduled_at, \"HH:mm\")\n    }))\n    .catch(console.log);\n}\n\nexport function deleteTask(id) {\n  return axios.delete(url(`/tasks/${id}`));\n}\n","import * as React from \"react\";\nimport ReactSlider from \"react-rangeslider\";\nimport \"react-rangeslider/lib/index.css\";\nimport \"./slider-custom.css\";\n\nexport class Slider extends React.Component {\n  render() {\n    return (\n      <ReactSlider orientation=\"vertical\" min={0} max={100} {...this.props} />\n    );\n  }\n}\n","import * as React from \"react\";\nimport \"./schedule.css\";\n\nexport const Schedule = ({ tasks, onClick, onCreate }) => {\n  return (\n    <div className=\"schedule--wrapper\">\n      <div onClick={() => onCreate()} className=\"task\">\n        ADD NEW\n      </div>\n\n      {tasks.map(task => (\n        <div key={task.id} onClick={() => onClick(task)} className=\"task\">\n          {task.time.format(\"LT\")} - {task.value}%\n        </div>\n      ))}\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport TimePicker from \"rc-time-picker\";\nimport \"rc-time-picker/assets/index.css\";\nimport { Slider } from \"../slider/Slider\";\nimport \"./task-edit.css\";\n\nconst format = \"h:mm a\";\n\nexport class TaskEdit extends React.Component {\n  state = {\n    selectedTime: this.props.task.time,\n    value: this.props.task.value\n  };\n\n  render() {\n    return (\n      <div className=\"task-edit-wrapper\">\n        <TimePicker\n          showSecond={false}\n          defaultValue={this.props.task.time}\n          className=\"task-edit task\"\n          onChange={value =>\n            this.setState({\n              selectedTime: value\n            })\n          }\n          format={format}\n          use12Hours\n          inputReadOnly\n        />\n        <Slider\n          value={this.state.value}\n          onChange={value =>\n            this.setState({\n              value\n            })\n          }\n        />\n\n        <button onClick={this.props.onDelete} className=\"button button--delete\">\n          Delete\n        </button>\n        <button\n          onClick={() =>\n            this.props.onSave({\n              scheduled_at: this.state.selectedTime.format(\"HH:mm:ss\"),\n              desired_value: this.state.value\n            })\n          }\n          className=\"button button--save\"\n        >\n          Save\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport moment from \"moment\";\n\nimport { Navigation } from \"./containers/nav/Nav\";\n\nimport \"./App.css\";\nimport {\n  getCurrentState,\n  createTask,\n  getTasks,\n  getLightReading,\n  updateCurrentSetting,\n  deleteTask,\n  updateTask\n} from \"./api\";\nimport { Slider } from \"./containers/slider/Slider\";\nimport { Schedule } from \"./containers/schedule/schedule\";\nimport { TaskEdit } from \"./containers/task-edit/task-edit\";\n\nclass App extends React.Component {\n  state = {\n    currentRoute: \"HOME\",\n    currentSetting: 0,\n    taskId: \"null\",\n    // kinda dumb way to handle not sending the same value twice if user fe. clicks on the slider\n    lastSentSetting: 0,\n    tasks: [],\n    light: null\n  };\n\n  // Up for you to implement\n  // Sets the state to whatever you get from the backend\n  componentDidMount() {\n    getCurrentState().then(value => this.setState({ currentSetting: value }));\n    this.updateLightReading();\n    this.getTasks();\n  }\n\n  getTasks = () => {\n    return getTasks().then(tasks =>\n      this.setState({\n        tasks: tasks.map(t => ({\n          id: t.id,\n          value: t.desired_value,\n          time: moment(t.scheduled_at, \"HH:mm\")\n        }))\n      })\n    );\n  };\n\n  updateLightReading = () => {\n    getLightReading().then(light => {\n      this.setState({ light });\n      setTimeout(this.updateLightReading, 500);\n    });\n  };\n\n  sendUpdatedCurrentSetting = () => {\n    if (this.state.lastSentSetting !== this.state.currentSetting) {\n      updateCurrentSetting(this.state.currentSetting).then(setting =>\n        this.setState({\n          currentSetting: setting,\n          lastSentSetting: setting\n        })\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"app\">\n        {this.state.currentRoute === \"HOME\" && (\n          <div>\n            <h2>{this.state.light || \"unknown\"} lm</h2>\n            <Slider\n              value={this.state.currentSetting}\n              onChange={value =>\n                this.setState({\n                  currentSetting: value\n                })\n              }\n              onChangeComplete={() => {\n                this.sendUpdatedCurrentSetting();\n              }}\n            />\n          </div>\n        )}\n        {this.state.currentRoute === \"SCHEDULE\" && (\n          <Schedule\n            tasks={this.state.tasks}\n            onClick={({ id: taskId }) =>\n              this.setState({\n                currentRoute: \"TASK_EDIT\",\n                taskId\n              })\n            }\n            onCreate={() => {\n              createTask().then(({ id: taskId }) =>\n                this.getTasks().then(() =>\n                  this.setState({\n                    currentRoute: \"TASK_EDIT\",\n                    taskId\n                  })\n                )\n              );\n            }}\n          />\n        )}\n        {this.state.currentRoute === \"TASK_EDIT\" && (\n          <TaskEdit\n            task={this.state.tasks.find(t => t.id === this.state.taskId)}\n            onDelete={() =>\n              deleteTask(this.state.taskId).then(() =>\n                this.setState({\n                  tasks: this.state.tasks.filter(\n                    t => t.id !== this.state.taskId\n                  ),\n                  currentRoute: \"SCHEDULE\"\n                })\n              )\n            }\n            onSave={updatedTask => {\n              updateTask(this.state.taskId, { task: updatedTask }).then(task =>\n                this.setState({\n                  currentRoute: \"SCHEDULE\",\n                  tasks: this.state.tasks.map(t => {\n                    if (t.id === this.state.taskId) {\n                      return task;\n                    }\n                    return t;\n                  })\n                })\n              );\n            }}\n          />\n        )}\n        <Navigation\n          min={0}\n          max={100}\n          value={10}\n          onSunnyClick={() =>\n            this.setState({\n              currentRoute: \"HOME\"\n            })\n          }\n          onClockClick={() =>\n            this.setState({\n              currentRoute: \"SCHEDULE\"\n            })\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/schedule.3280ca9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.c9afe933.svg\";"],"sourceRoot":""}